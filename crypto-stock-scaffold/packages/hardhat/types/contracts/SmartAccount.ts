/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SmartAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "GUARDIAN_ROLE"
      | "GUARDIAN_THRESHOLD"
      | "RECOVERY_PERIOD"
      | "SESSION_KEY_DURATION"
      | "SESSION_KEY_ROLE"
      | "activeRecovery"
      | "calculateMaxMintAmount"
      | "cancelRecovery"
      | "confirmRecovery"
      | "dexRouter"
      | "executeBatch"
      | "getRoleAdmin"
      | "grantRole"
      | "grantSessionKey"
      | "guardians"
      | "hasRole"
      | "initiateRecovery"
      | "nonce"
      | "owner"
      | "pause"
      | "paused"
      | "redeemAndSwap"
      | "renounceRole"
      | "revokeRole"
      | "revokeSessionKey"
      | "sessionKeyExpiry"
      | "supportsInterface"
      | "swapAndMint"
      | "syntheticStock"
      | "unpause"
      | "validateUserOp"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchExecuted"
      | "GuardianAdded"
      | "GuardianRemoved"
      | "OwnerChanged"
      | "Paused"
      | "RecoveryExecuted"
      | "RecoveryInitiated"
      | "RedeemAndSwapExecuted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SessionKeyGranted"
      | "SwapAndMintExecuted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUARDIAN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUARDIAN_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECOVERY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SESSION_KEY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SESSION_KEY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxMintAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantSessionKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "guardians",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRecovery",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemAndSwap",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSessionKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sessionKeyExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndMint",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syntheticStock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUARDIAN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUARDIAN_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RECOVERY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SESSION_KEY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SESSION_KEY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantSessionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardians", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeSessionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionKeyExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syntheticStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace BatchExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    callData: BytesLike[],
    success: boolean[],
    results: BytesLike[]
  ];
  export type OutputTuple = [
    user: string,
    callData: string[],
    success: boolean[],
    results: string[]
  ];
  export interface OutputObject {
    user: string;
    callData: string[];
    success: boolean[];
    results: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardianAddedEvent {
  export type InputTuple = [guardian: AddressLike];
  export type OutputTuple = [guardian: string];
  export interface OutputObject {
    guardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardianRemovedEvent {
  export type InputTuple = [guardian: AddressLike];
  export type OutputTuple = [guardian: string];
  export interface OutputObject {
    guardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryExecutedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryInitiatedEvent {
  export type InputTuple = [newOwner: AddressLike, deadline: BigNumberish];
  export type OutputTuple = [newOwner: string, deadline: bigint];
  export interface OutputObject {
    newOwner: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemAndSwapExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    aaplRedeemed: BigNumberish,
    tokenOut: AddressLike,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    aaplRedeemed: bigint,
    tokenOut: string,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    aaplRedeemed: bigint;
    tokenOut: string;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionKeyGrantedEvent {
  export type InputTuple = [sessionKey: AddressLike, expiry: BigNumberish];
  export type OutputTuple = [sessionKey: string, expiry: bigint];
  export interface OutputObject {
    sessionKey: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndMintExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenIn: AddressLike,
    amountIn: BigNumberish,
    aaplMinted: BigNumberish,
    gasUsed: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenIn: string,
    amountIn: bigint,
    aaplMinted: bigint,
    gasUsed: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenIn: string;
    amountIn: bigint;
    aaplMinted: bigint;
    gasUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartAccount extends BaseContract {
  connect(runner?: ContractRunner | null): SmartAccount;
  waitForDeployment(): Promise<this>;

  interface: SmartAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GUARDIAN_ROLE: TypedContractMethod<[], [string], "view">;

  GUARDIAN_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  RECOVERY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  SESSION_KEY_DURATION: TypedContractMethod<[], [bigint], "view">;

  SESSION_KEY_ROLE: TypedContractMethod<[], [string], "view">;

  activeRecovery: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        newOwner: string;
        confirmations: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;

  calculateMaxMintAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  cancelRecovery: TypedContractMethod<[], [void], "nonpayable">;

  confirmRecovery: TypedContractMethod<[], [void], "nonpayable">;

  dexRouter: TypedContractMethod<[], [string], "view">;

  executeBatch: TypedContractMethod<
    [targets: AddressLike[], values: BigNumberish[], callData: BytesLike[]],
    [[boolean[], string[]] & { success: boolean[]; results: string[] }],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantSessionKey: TypedContractMethod<
    [sessionKey: AddressLike],
    [void],
    "nonpayable"
  >;

  guardians: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initiateRecovery: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  nonce: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  redeemAndSwap: TypedContractMethod<
    [
      aaplAmount: BigNumberish,
      tokenOut: AddressLike,
      minTokenOut: BigNumberish,
      swapData: BytesLike
    ],
    [[bigint, bigint] & { usdcRedeemed: bigint; tokenReceived: bigint }],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeSessionKey: TypedContractMethod<
    [sessionKey: AddressLike],
    [void],
    "nonpayable"
  >;

  sessionKeyExpiry: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapAndMint: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      minUsdcOut: BigNumberish,
      minAaplOut: BigNumberish,
      swapData: BytesLike
    ],
    [[bigint, bigint] & { usdcReceived: bigint; aaplMinted: bigint }],
    "nonpayable"
  >;

  syntheticStock: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  validateUserOp: TypedContractMethod<
    [
      userOp: BytesLike,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GUARDIAN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GUARDIAN_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RECOVERY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SESSION_KEY_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SESSION_KEY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeRecovery"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        newOwner: string;
        confirmations: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateMaxMintAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelRecovery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmRecovery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dexRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [targets: AddressLike[], values: BigNumberish[], callData: BytesLike[]],
    [[boolean[], string[]] & { success: boolean[]; results: string[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantSessionKey"
  ): TypedContractMethod<[sessionKey: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "guardians"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateRecovery"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeemAndSwap"
  ): TypedContractMethod<
    [
      aaplAmount: BigNumberish,
      tokenOut: AddressLike,
      minTokenOut: BigNumberish,
      swapData: BytesLike
    ],
    [[bigint, bigint] & { usdcRedeemed: bigint; tokenReceived: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeSessionKey"
  ): TypedContractMethod<[sessionKey: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sessionKeyExpiry"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapAndMint"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      minUsdcOut: BigNumberish,
      minAaplOut: BigNumberish,
      swapData: BytesLike
    ],
    [[bigint, bigint] & { usdcReceived: bigint; aaplMinted: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "syntheticStock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: BytesLike,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BatchExecuted"
  ): TypedContractEvent<
    BatchExecutedEvent.InputTuple,
    BatchExecutedEvent.OutputTuple,
    BatchExecutedEvent.OutputObject
  >;
  getEvent(
    key: "GuardianAdded"
  ): TypedContractEvent<
    GuardianAddedEvent.InputTuple,
    GuardianAddedEvent.OutputTuple,
    GuardianAddedEvent.OutputObject
  >;
  getEvent(
    key: "GuardianRemoved"
  ): TypedContractEvent<
    GuardianRemovedEvent.InputTuple,
    GuardianRemovedEvent.OutputTuple,
    GuardianRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryExecuted"
  ): TypedContractEvent<
    RecoveryExecutedEvent.InputTuple,
    RecoveryExecutedEvent.OutputTuple,
    RecoveryExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryInitiated"
  ): TypedContractEvent<
    RecoveryInitiatedEvent.InputTuple,
    RecoveryInitiatedEvent.OutputTuple,
    RecoveryInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "RedeemAndSwapExecuted"
  ): TypedContractEvent<
    RedeemAndSwapExecutedEvent.InputTuple,
    RedeemAndSwapExecutedEvent.OutputTuple,
    RedeemAndSwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SessionKeyGranted"
  ): TypedContractEvent<
    SessionKeyGrantedEvent.InputTuple,
    SessionKeyGrantedEvent.OutputTuple,
    SessionKeyGrantedEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndMintExecuted"
  ): TypedContractEvent<
    SwapAndMintExecutedEvent.InputTuple,
    SwapAndMintExecutedEvent.OutputTuple,
    SwapAndMintExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchExecuted(address,bytes[],bool[],bytes[])": TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;
    BatchExecuted: TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;

    "GuardianAdded(address)": TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;
    GuardianAdded: TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;

    "GuardianRemoved(address)": TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;
    GuardianRemoved: TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RecoveryExecuted(address)": TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;
    RecoveryExecuted: TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;

    "RecoveryInitiated(address,uint256)": TypedContractEvent<
      RecoveryInitiatedEvent.InputTuple,
      RecoveryInitiatedEvent.OutputTuple,
      RecoveryInitiatedEvent.OutputObject
    >;
    RecoveryInitiated: TypedContractEvent<
      RecoveryInitiatedEvent.InputTuple,
      RecoveryInitiatedEvent.OutputTuple,
      RecoveryInitiatedEvent.OutputObject
    >;

    "RedeemAndSwapExecuted(address,uint256,address,uint256)": TypedContractEvent<
      RedeemAndSwapExecutedEvent.InputTuple,
      RedeemAndSwapExecutedEvent.OutputTuple,
      RedeemAndSwapExecutedEvent.OutputObject
    >;
    RedeemAndSwapExecuted: TypedContractEvent<
      RedeemAndSwapExecutedEvent.InputTuple,
      RedeemAndSwapExecutedEvent.OutputTuple,
      RedeemAndSwapExecutedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SessionKeyGranted(address,uint256)": TypedContractEvent<
      SessionKeyGrantedEvent.InputTuple,
      SessionKeyGrantedEvent.OutputTuple,
      SessionKeyGrantedEvent.OutputObject
    >;
    SessionKeyGranted: TypedContractEvent<
      SessionKeyGrantedEvent.InputTuple,
      SessionKeyGrantedEvent.OutputTuple,
      SessionKeyGrantedEvent.OutputObject
    >;

    "SwapAndMintExecuted(address,address,uint256,uint256,uint256)": TypedContractEvent<
      SwapAndMintExecutedEvent.InputTuple,
      SwapAndMintExecutedEvent.OutputTuple,
      SwapAndMintExecutedEvent.OutputObject
    >;
    SwapAndMintExecuted: TypedContractEvent<
      SwapAndMintExecutedEvent.InputTuple,
      SwapAndMintExecutedEvent.OutputTuple,
      SwapAndMintExecutedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
