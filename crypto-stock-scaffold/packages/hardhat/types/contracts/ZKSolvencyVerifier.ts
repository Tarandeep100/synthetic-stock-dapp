/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZKSolvencyVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_PROOF_INTERVAL"
      | "PAUSER_ROLE"
      | "PROOF_VALIDITY_PERIOD"
      | "PROVER_ROLE"
      | "emergencyStateCheck"
      | "getProofHistory"
      | "getRoleAdmin"
      | "getSolvencyStatus"
      | "getVerifyingKeyAlpha"
      | "getVerifyingKeyBeta"
      | "getVerifyingKeyDelta"
      | "getVerifyingKeyGamma"
      | "getVerifyingKeyIC"
      | "grantRole"
      | "hasRole"
      | "isLatestProofValid"
      | "latestProof"
      | "pause"
      | "paused"
      | "proofCount"
      | "proofHistory"
      | "renounceRole"
      | "revokeRole"
      | "submitSolvencyProof"
      | "supportsInterface"
      | "syntheticStock"
      | "unpause"
      | "updateVerifyingKey"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Paused"
      | "ProofSubmitted"
      | "ProofVerified"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SolvencyAlert"
      | "Unpaused"
      | "VerifyingKeyUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROOF_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROOF_VALIDITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStateCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProofHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSolvencyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyingKeyAlpha",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyingKeyBeta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyingKeyDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyingKeyGamma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyingKeyIC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLatestProofValid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProof",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proofCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolvencyProof",
    values: [BigNumberish[], [BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syntheticStock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateVerifyingKey",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish][]
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROOF_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROOF_VALIDITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStateCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProofHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSolvencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyingKeyAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyingKeyBeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyingKeyDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyingKeyGamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyingKeyIC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLatestProofValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proofHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitSolvencyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syntheticStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifyingKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofSubmittedEvent {
  export type InputTuple = [
    proofId: BigNumberish,
    timestamp: BigNumberish,
    verified: boolean,
    prover: AddressLike
  ];
  export type OutputTuple = [
    proofId: bigint,
    timestamp: bigint,
    verified: boolean,
    prover: string
  ];
  export interface OutputObject {
    proofId: bigint;
    timestamp: bigint;
    verified: boolean;
    prover: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [
    proofId: BigNumberish,
    timestamp: BigNumberish,
    totalCollateral: BigNumberish,
    totalSupply: BigNumberish,
    collateralizationRatio: BigNumberish
  ];
  export type OutputTuple = [
    proofId: bigint,
    timestamp: bigint,
    totalCollateral: bigint,
    totalSupply: bigint,
    collateralizationRatio: bigint
  ];
  export interface OutputObject {
    proofId: bigint;
    timestamp: bigint;
    totalCollateral: bigint;
    totalSupply: bigint;
    collateralizationRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SolvencyAlertEvent {
  export type InputTuple = [
    collateralizationRatio: BigNumberish,
    isSolvent: boolean
  ];
  export type OutputTuple = [
    collateralizationRatio: bigint,
    isSolvent: boolean
  ];
  export interface OutputObject {
    collateralizationRatio: bigint;
    isSolvent: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyingKeyUpdatedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKSolvencyVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ZKSolvencyVerifier;
  waitForDeployment(): Promise<this>;

  interface: ZKSolvencyVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_PROOF_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PROOF_VALIDITY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  PROVER_ROLE: TypedContractMethod<[], [string], "view">;

  emergencyStateCheck: TypedContractMethod<
    [],
    [[boolean, bigint] & { matches: boolean; onChainRatio: bigint }],
    "view"
  >;

  getProofHistory: TypedContractMethod<
    [proofId: BigNumberish],
    [
      [bigint[], bigint, boolean] & {
        proof: bigint[];
        timestamp: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSolvencyStatus: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isSolvent: boolean;
        collateralizationRatio: bigint;
        proofAge: bigint;
      }
    ],
    "view"
  >;

  getVerifyingKeyAlpha: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getVerifyingKeyBeta: TypedContractMethod<
    [],
    [[[bigint, bigint], [bigint, bigint]]],
    "view"
  >;

  getVerifyingKeyDelta: TypedContractMethod<
    [],
    [[[bigint, bigint], [bigint, bigint]]],
    "view"
  >;

  getVerifyingKeyGamma: TypedContractMethod<
    [],
    [[[bigint, bigint], [bigint, bigint]]],
    "view"
  >;

  getVerifyingKeyIC: TypedContractMethod<[], [[bigint, bigint][]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isLatestProofValid: TypedContractMethod<
    [],
    [[boolean, bigint] & { isValid: boolean; timeRemaining: bigint }],
    "view"
  >;

  latestProof: TypedContractMethod<
    [],
    [[bigint, boolean] & { timestamp: bigint; verified: boolean }],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proofCount: TypedContractMethod<[], [bigint], "view">;

  proofHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { timestamp: bigint; verified: boolean }],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  submitSolvencyProof: TypedContractMethod<
    [
      proof: BigNumberish[],
      publicSignals: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  syntheticStock: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateVerifyingKey: TypedContractMethod<
    [
      alpha: [BigNumberish, BigNumberish],
      beta: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      gamma: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      delta: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      ic: [BigNumberish, BigNumberish][]
    ],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_PROOF_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROOF_VALIDITY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROVER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyStateCheck"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { matches: boolean; onChainRatio: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProofHistory"
  ): TypedContractMethod<
    [proofId: BigNumberish],
    [
      [bigint[], bigint, boolean] & {
        proof: bigint[];
        timestamp: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSolvencyStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isSolvent: boolean;
        collateralizationRatio: bigint;
        proofAge: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVerifyingKeyAlpha"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getVerifyingKeyBeta"
  ): TypedContractMethod<[], [[[bigint, bigint], [bigint, bigint]]], "view">;
  getFunction(
    nameOrSignature: "getVerifyingKeyDelta"
  ): TypedContractMethod<[], [[[bigint, bigint], [bigint, bigint]]], "view">;
  getFunction(
    nameOrSignature: "getVerifyingKeyGamma"
  ): TypedContractMethod<[], [[[bigint, bigint], [bigint, bigint]]], "view">;
  getFunction(
    nameOrSignature: "getVerifyingKeyIC"
  ): TypedContractMethod<[], [[bigint, bigint][]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLatestProofValid"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { isValid: boolean; timeRemaining: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestProof"
  ): TypedContractMethod<
    [],
    [[bigint, boolean] & { timestamp: bigint; verified: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proofCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proofHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { timestamp: bigint; verified: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitSolvencyProof"
  ): TypedContractMethod<
    [
      proof: BigNumberish[],
      publicSignals: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "syntheticStock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVerifyingKey"
  ): TypedContractMethod<
    [
      alpha: [BigNumberish, BigNumberish],
      beta: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      gamma: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      delta: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      ic: [BigNumberish, BigNumberish][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProofSubmitted"
  ): TypedContractEvent<
    ProofSubmittedEvent.InputTuple,
    ProofSubmittedEvent.OutputTuple,
    ProofSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SolvencyAlert"
  ): TypedContractEvent<
    SolvencyAlertEvent.InputTuple,
    SolvencyAlertEvent.OutputTuple,
    SolvencyAlertEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifyingKeyUpdated"
  ): TypedContractEvent<
    VerifyingKeyUpdatedEvent.InputTuple,
    VerifyingKeyUpdatedEvent.OutputTuple,
    VerifyingKeyUpdatedEvent.OutputObject
  >;

  filters: {
    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProofSubmitted(uint256,uint256,bool,address)": TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;
    ProofSubmitted: TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;

    "ProofVerified(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SolvencyAlert(uint256,bool)": TypedContractEvent<
      SolvencyAlertEvent.InputTuple,
      SolvencyAlertEvent.OutputTuple,
      SolvencyAlertEvent.OutputObject
    >;
    SolvencyAlert: TypedContractEvent<
      SolvencyAlertEvent.InputTuple,
      SolvencyAlertEvent.OutputTuple,
      SolvencyAlertEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifyingKeyUpdated(address)": TypedContractEvent<
      VerifyingKeyUpdatedEvent.InputTuple,
      VerifyingKeyUpdatedEvent.OutputTuple,
      VerifyingKeyUpdatedEvent.OutputObject
    >;
    VerifyingKeyUpdated: TypedContractEvent<
      VerifyingKeyUpdatedEvent.InputTuple,
      VerifyingKeyUpdatedEvent.OutputTuple,
      VerifyingKeyUpdatedEvent.OutputObject
    >;
  };
}
